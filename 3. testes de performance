#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void selectionSort(int arr[], int n) {
    int i, j, min_idx, temp;
    for (i = 0; i < n-1; i++) {
        min_idx = i;
        for (j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
        temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    int temp;
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    int temp;
    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;
    if (largest != i) {
        temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    int temp;
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--) {
        temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

void measureExecutionTime(void (*sortFunction)(int[], int), int arr[], int n, const char* algorithmName) {
    int* arrCopy = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++)
        arrCopy[i] = arr[i];

    clock_t start, end;
    double cpu_time_used;
    
    start = clock();
    sortFunction(arrCopy, n);
    end = clock();
    
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("%s: Tempo de execução para %d elementos = %f segundos\n", algorithmName, n, cpu_time_used);

    free(arrCopy);
}

int main() {
    int sizes[] = {100, 1000, 10000, 50000, 100000};
    int numSizes = sizeof(sizes) / sizeof(sizes[0]);

    for (int i = 0; i < numSizes; i++) {
        int n = sizes[i];
        int* arr = (int*)malloc(n * sizeof(int));
        
        for (int j = 0; j < n; j++)
            arr[j] = rand();

        printf("Testando para %d elementos:\n", n);

        measureExecutionTime(selectionSort, arr, n, "Selection Sort");
        measureExecutionTime(insertionSort, arr, n, "Insertion Sort");
        measureExecutionTime(bubbleSort, arr, n, "Bubble Sort");

        measureExecutionTime((void (*)(int[], int))mergeSort, arr, n, "Merge Sort");
        measureExecutionTime((void (*)(int[], int))quickSort, arr, n, "Quick Sort");
        measureExecutionTime(heapSort, arr, n, "Heap Sort");

        free(arr);
        printf("\n");
    }
    return 0;
}

Explicando o código:
Cada algoritmo de ordenação foi implementado como uma função separada;
Função measureExecutionTime: recebe como parâmetro um ponteiro para a função de ordenação, cria uma cópia do array para evitar interferência nos testes e além disso, mede o tempo de execução usando clock() da biblioteca time.h;
Loop de Teste: Para cada tamanho de entrada (100, 1.000, 10.000, 50.000 e 100.000 elementos), o programa cria um array aleatório e testa cada algoritmo de ordenação, exibindo o tempo de execução para cada um.
