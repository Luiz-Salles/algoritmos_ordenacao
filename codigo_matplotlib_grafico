import time
import random
import matplotlib.pyplot as plt

# Função para gerar um array aleatório
def generate_random_array(size):
    return [random.randint(0, 1000) for _ in range(size)]

# Função de troca para os algoritmos de ordenação
def swap(a, b):
    return b, a

# Funções dos algoritmos de ordenação (simplificadas)
def selection_sort(arr):
    arr = arr.copy()
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = swap(arr[i], arr[min_idx])
    return arr

def insertion_sort(arr):
    arr = arr.copy()
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def bubble_sort(arr):
    arr = arr.copy()
    for i in range(len(arr)):
        for j in range(0, len(arr) - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = swap(arr[j], arr[j + 1])
    return arr

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
    return arr

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# Função para medir o tempo de execução
def measure_time(sort_func, arr):
    start = time.time()
    sort_func(arr)
    return time.time() - start

# Configuração dos testes
array_sizes = [100, 500, 1000, 5000, 10000]
algorithms = {
    "Selection Sort": selection_sort,
    "Insertion Sort": insertion_sort,
    "Bubble Sort": bubble_sort,
    "Merge Sort": merge_sort,
    "Quick Sort": quick_sort
}

# Armazenar os tempos
times = {name: [] for name in algorithms}

# Executar os testes
for size in array_sizes:
    arr = generate_random_array(size)
    for name, func in algorithms.items():
        time_taken = measure_time(func, arr)
        times[name].append(time_taken)

# Plotar o gráfico
for name, time_taken in times.items():
    plt.plot(array_sizes, time_taken, label=name)

plt.xlabel("Tamanho do Array")
plt.ylabel("Tempo de Execução (s)")
plt.title("Desempenho dos Algoritmos de Ordenação")
plt.legend()
plt.show()
